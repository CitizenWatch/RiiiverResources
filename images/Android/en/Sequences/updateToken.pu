@startuml
title Update credentials
hide footbox

skinparam DefaultFontName "Noto Sans JP, Helvetica, Arial, Liberation Sans"
skinparam BackgroundColor #F2EEE6
skinparam Shadowing false
skinparam NoteBackgroundColor #F9B5AD
skinparam NodeBorderColor #F26767

skinparam sequence {
ArrowColor #444444
ActorBorderColor Black
LifeLineBorderColor #222222
LifeLineBackgroundColor White
BoxBorderColor #FFFFFF
BoxBackgroundColor #F2fEf6
GroupBackgroundColor #FFFFFF
GroupBodyBackgroundColor #F3F0F0

ParticipantBorderColor #111111
ParticipantBackgroundColor White
ParticipantFontSize 17
ParticipantFontColor #111111
BoundaryBorderColor Gray
ActorBackgroundColor #eeeeee
ActorFontColor Black

}

actor User
participant YourApp as App
participant "Riiiver\nSDK" as ERSDK
participant "Riiiver\nCloud" as Riiiver

activate App

App -> ERSDK: ERAuth.getInstance().initialize(Context context)
activate ERSDK

... Logged in - iiidea is an instance of the target ERApplet class ...

App -> App: Check the network status.
alt Network available (within range)
    App -> ERSDK: Update authentication session.\nERAuth.sharedInstance.getToken(\n\IERAuthGetTokenCallback callback\n)
    ERSDK -> Riiiver: Login process
    ERSDK <-- Riiiver: Token
    alt Success
    App <-- ERSDK: callback.onSuccess( ERAuthToken token )
        App -> App: Save the token\n(\n local.accessToken = token.accessToken\n local.idToken = idToken\n)
        note right: Successfully obtained authentication\ninformation from RiiiverSDK.
    else else
    App <-- ERSDK: callback.onError( Exception error )
        ... Start over from the login process. ...
    end
else No network (out of range)
    App -> App: Network error handling
    User <- App: "Network Error!"ã€€
end

@enduml
